% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BI_mergeMatrixDup.R
\name{mergeMatrixDup}
\alias{mergeMatrixDup}
\title{merge matrix of duplicates in row/col orientation}
\usage{
mergeMatrixDup(
  x,
  mergeCol = T,
  fun_col = mean,
  refCol = NULL,
  mergeRow = T,
  fun_row = mean,
  refRow = NULL,
  verbose = T,
  parallel = T
)
}
\arguments{
\item{x}{matrix or data frame}

\item{mergeCol}{whether to merge duplicate in col orientation}

\item{fun_col}{the function used in col merge}

\item{refCol}{Character. the reference of col merge. It must be aligned precisely with col IDs in the \code{x}, otherwise the result is not reliable.}

\item{mergeRow}{whether to merge duplicate in row orientation}

\item{fun_row}{the function used in row merge}

\item{refRow}{Character. the reference of row merge. It must be aligned precisely with row IDs in the \code{x}, otherwise the result is not reliable. if \code{refRow=NULL}, \code{mergRow} would be forced to \code{F}}

\item{verbose}{Logic. Whether to report the running process.}

\item{parallel}{parallel method is still in BETA.}
}
\value{
repaired data of input
}
\description{
sometime we want to merge duplicate IDs(for example,gene id or patient id) by specified strategy(for example,if we merge gene expression data, \code{\link{mean}} is commonly used). \code{mergeMatrixDup} provide a convenient way to do this job.
}
\examples{
set.seed(2018);dimname <- list(rownames=paste("row",sample(1:100,100,replace = T),sep = "_"),colnames=paste("col",sample(1:100,100,replace = T),sep = "_"))
set.seed(2019);dat <- sample(1:1000,10000,replace = T);dat <- matrix(dat,nrow=100,dimnames = dimname )

## There are some duplicates IDs in both col and row orientation
table(duplicated(rownames(dat))) # T=38
table(duplicated(colnames(dat))) # T=36

## merge duplicates
refCol = dimname[["colnames"]]
refRow = dimname[["rownames"]]
x2 <- mergeMatrixDup(dat,
                     mergeCol = T,
                     refCol = dimname[["colnames"]],
                     fun_col = mean,
                     mergeRow = T,
                     refRow = dimname[["rownames"]],
                     fun_row = mean)

## test whether the result is correct(All TRUE)
mean(dat[refRow \%in\% "row_7","col_28"]) == x2["row_7","col_28"]
mean(dat[refRow \%in\% "row_77","col_28"]) == x2["row_77","col_28"]
mean(dat["row_34",refCol \%in\% "col_42"]) == x2["row_34","col_42"]
mean(dat["row_47",refCol \%in\% "col_73"]) == x2["row_47","col_73"]
}
\seealso{
\code{\link{tapply}}; \code{\link{apply}}
}
\author{
Weibin Huang<\email{654751191@qq.com}>
}
